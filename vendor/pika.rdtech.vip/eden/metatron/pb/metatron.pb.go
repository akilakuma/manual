// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.12.3
// source: metatron.proto

package metatron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateBigQueryUserDataPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *UpdateBigQueryUserDataPara) Reset() {
	*x = UpdateBigQueryUserDataPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBigQueryUserDataPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBigQueryUserDataPara) ProtoMessage() {}

func (x *UpdateBigQueryUserDataPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBigQueryUserDataPara.ProtoReflect.Descriptor instead.
func (*UpdateBigQueryUserDataPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateBigQueryUserDataPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateBigQueryUserDataPara) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UpdateBigQueryUserDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateBigQueryUserDataRes) Reset() {
	*x = UpdateBigQueryUserDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBigQueryUserDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBigQueryUserDataRes) ProtoMessage() {}

func (x *UpdateBigQueryUserDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBigQueryUserDataRes.ProtoReflect.Descriptor instead.
func (*UpdateBigQueryUserDataRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateBigQueryUserDataRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddUserLabelToUserPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLabelName string `protobuf:"bytes,2,opt,name=user_label_name,json=userLabelName,proto3" json:"user_label_name,omitempty"`
	UserName      string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *AddUserLabelToUserPara) Reset() {
	*x = AddUserLabelToUserPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLabelToUserPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLabelToUserPara) ProtoMessage() {}

func (x *AddUserLabelToUserPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLabelToUserPara.ProtoReflect.Descriptor instead.
func (*AddUserLabelToUserPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{2}
}

func (x *AddUserLabelToUserPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddUserLabelToUserPara) GetUserLabelName() string {
	if x != nil {
		return x.UserLabelName
	}
	return ""
}

func (x *AddUserLabelToUserPara) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type AddUserLabelToUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"` //狀態
}

func (x *AddUserLabelToUserRes) Reset() {
	*x = AddUserLabelToUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLabelToUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLabelToUserRes) ProtoMessage() {}

func (x *AddUserLabelToUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLabelToUserRes.ProtoReflect.Descriptor instead.
func (*AddUserLabelToUserRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{3}
}

func (x *AddUserLabelToUserRes) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

type DelUserLabelToUserPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLabelId int64 `protobuf:"varint,2,opt,name=user_label_id,json=userLabelId,proto3" json:"user_label_id,omitempty"`
}

func (x *DelUserLabelToUserPara) Reset() {
	*x = DelUserLabelToUserPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserLabelToUserPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserLabelToUserPara) ProtoMessage() {}

func (x *DelUserLabelToUserPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserLabelToUserPara.ProtoReflect.Descriptor instead.
func (*DelUserLabelToUserPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{4}
}

func (x *DelUserLabelToUserPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DelUserLabelToUserPara) GetUserLabelId() int64 {
	if x != nil {
		return x.UserLabelId
	}
	return 0
}

type DelUserLabelToUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"` //狀態
}

func (x *DelUserLabelToUserRes) Reset() {
	*x = DelUserLabelToUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserLabelToUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserLabelToUserRes) ProtoMessage() {}

func (x *DelUserLabelToUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserLabelToUserRes.ProtoReflect.Descriptor instead.
func (*DelUserLabelToUserRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{5}
}

func (x *DelUserLabelToUserRes) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{6}
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{7}
}

func (x *Pong) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type GetUserDataPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                           //使用者id
	UserLabelSearchPara string `protobuf:"bytes,2,opt,name=user_label_search_para,json=userLabelSearchPara,proto3" json:"user_label_search_para,omitempty"` //搜尋特定標籤關鍵字
}

func (x *GetUserDataPara) Reset() {
	*x = GetUserDataPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataPara) ProtoMessage() {}

func (x *GetUserDataPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataPara.ProtoReflect.Descriptor instead.
func (*GetUserDataPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserDataPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserDataPara) GetUserLabelSearchPara() string {
	if x != nil {
		return x.UserLabelSearchPara
	}
	return ""
}

type GetUserDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDataSlice []*UserData `protobuf:"bytes,1,rep,name=user_data_slice,json=userDataSlice,proto3" json:"user_data_slice,omitempty"`
}

func (x *GetUserDataRes) Reset() {
	*x = GetUserDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataRes) ProtoMessage() {}

func (x *GetUserDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataRes.ProtoReflect.Descriptor instead.
func (*GetUserDataRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserDataRes) GetUserDataSlice() []*UserData {
	if x != nil {
		return x.UserDataSlice
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //使用者id
	UserName   string       `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`       //使用者名稱
	UserLabels []*UserLabel `protobuf:"bytes,3,rep,name=user_labels,json=userLabels,proto3" json:"user_labels,omitempty"` //玩家標籤
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{10}
}

func (x *UserData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserData) GetUserLabels() []*UserLabel {
	if x != nil {
		return x.UserLabels
	}
	return nil
}

type UpdateUserDataPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`      //使用者id
	UserName   string       `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //使用者名稱
	UserLabels []*UserLabel `protobuf:"bytes,3,rep,name=user_labels,json=userLabels,proto3" json:"user_labels,omitempty"`
}

func (x *UpdateUserDataPara) Reset() {
	*x = UpdateUserDataPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDataPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDataPara) ProtoMessage() {}

func (x *UpdateUserDataPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDataPara.ProtoReflect.Descriptor instead.
func (*UpdateUserDataPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserDataPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserDataPara) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UpdateUserDataPara) GetUserLabels() []*UserLabel {
	if x != nil {
		return x.UserLabels
	}
	return nil
}

type UpdateUserDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` //狀態 成功或失敗
}

func (x *UpdateUserDataRes) Reset() {
	*x = UpdateUserDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDataRes) ProtoMessage() {}

func (x *UpdateUserDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDataRes.ProtoReflect.Descriptor instead.
func (*UpdateUserDataRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserDataRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetAllUserLabelPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchPara string `protobuf:"bytes,1,opt,name=search_para,json=searchPara,proto3" json:"search_para,omitempty"` //搜尋特定標籤關鍵字
}

func (x *GetAllUserLabelPara) Reset() {
	*x = GetAllUserLabelPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserLabelPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserLabelPara) ProtoMessage() {}

func (x *GetAllUserLabelPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserLabelPara.ProtoReflect.Descriptor instead.
func (*GetAllUserLabelPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllUserLabelPara) GetSearchPara() string {
	if x != nil {
		return x.SearchPara
	}
	return ""
}

type GetAllUserLabelRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLabels []*UserLabel `protobuf:"bytes,1,rep,name=user_labels,json=userLabels,proto3" json:"user_labels,omitempty"`
}

func (x *GetAllUserLabelRes) Reset() {
	*x = GetAllUserLabelRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserLabelRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserLabelRes) ProtoMessage() {}

func (x *GetAllUserLabelRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserLabelRes.ProtoReflect.Descriptor instead.
func (*GetAllUserLabelRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllUserLabelRes) GetUserLabels() []*UserLabel {
	if x != nil {
		return x.UserLabels
	}
	return nil
}

type UserLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             //玩家標籤id
	UserLabelName string `protobuf:"bytes,2,opt,name=user_label_name,json=userLabelName,proto3" json:"user_label_name,omitempty"` //玩家標籤名稱
	Weight        int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`                                     //權重
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                            //玩家標籤敘述
}

func (x *UserLabel) Reset() {
	*x = UserLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLabel) ProtoMessage() {}

func (x *UserLabel) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLabel.ProtoReflect.Descriptor instead.
func (*UserLabel) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{15}
}

func (x *UserLabel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLabel) GetUserLabelName() string {
	if x != nil {
		return x.UserLabelName
	}
	return ""
}

func (x *UserLabel) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UserLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AddNewUserLabelPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLabelName string `protobuf:"bytes,1,opt,name=user_label_name,json=userLabelName,proto3" json:"user_label_name,omitempty"` //玩家標籤名稱
	Weight        int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`                                     //權重
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                            //玩家標籤敘述
}

func (x *AddNewUserLabelPara) Reset() {
	*x = AddNewUserLabelPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserLabelPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserLabelPara) ProtoMessage() {}

func (x *AddNewUserLabelPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserLabelPara.ProtoReflect.Descriptor instead.
func (*AddNewUserLabelPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{16}
}

func (x *AddNewUserLabelPara) GetUserLabelName() string {
	if x != nil {
		return x.UserLabelName
	}
	return ""
}

func (x *AddNewUserLabelPara) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AddNewUserLabelPara) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AddNewUserLabelRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddNewUserLabelRes) Reset() {
	*x = AddNewUserLabelRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserLabelRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserLabelRes) ProtoMessage() {}

func (x *AddNewUserLabelRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserLabelRes.ProtoReflect.Descriptor instead.
func (*AddNewUserLabelRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{17}
}

func (x *AddNewUserLabelRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddNewUserLabelSettingsPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLabelId int64              `protobuf:"varint,1,opt,name=user_label_id,json=userLabelId,proto3" json:"user_label_id,omitempty"`
	SupportRule []string           `protobuf:"bytes,2,rep,name=support_rule,json=supportRule,proto3" json:"support_rule,omitempty"`
	SupportGame []string           `protobuf:"bytes,3,rep,name=support_game,json=supportGame,proto3" json:"support_game,omitempty"`
	SupportRtp  map[string]float64 `protobuf:"bytes,4,rep,name=support_rtp,json=supportRtp,proto3" json:"support_rtp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *AddNewUserLabelSettingsPara) Reset() {
	*x = AddNewUserLabelSettingsPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserLabelSettingsPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserLabelSettingsPara) ProtoMessage() {}

func (x *AddNewUserLabelSettingsPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserLabelSettingsPara.ProtoReflect.Descriptor instead.
func (*AddNewUserLabelSettingsPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{18}
}

func (x *AddNewUserLabelSettingsPara) GetUserLabelId() int64 {
	if x != nil {
		return x.UserLabelId
	}
	return 0
}

func (x *AddNewUserLabelSettingsPara) GetSupportRule() []string {
	if x != nil {
		return x.SupportRule
	}
	return nil
}

func (x *AddNewUserLabelSettingsPara) GetSupportGame() []string {
	if x != nil {
		return x.SupportGame
	}
	return nil
}

func (x *AddNewUserLabelSettingsPara) GetSupportRtp() map[string]float64 {
	if x != nil {
		return x.SupportRtp
	}
	return nil
}

type AddNewUserLabelSettingsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddNewUserLabelSettingsRes) Reset() {
	*x = AddNewUserLabelSettingsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewUserLabelSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewUserLabelSettingsRes) ProtoMessage() {}

func (x *AddNewUserLabelSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewUserLabelSettingsRes.ProtoReflect.Descriptor instead.
func (*AddNewUserLabelSettingsRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{19}
}

func (x *AddNewUserLabelSettingsRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetNewSupportGamePara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SupportGame      []string `protobuf:"bytes,2,rep,name=support_game,json=supportGame,proto3" json:"support_game,omitempty"`
	UserLabelIdSlice []int64  `protobuf:"varint,3,rep,packed,name=user_label_id_slice,json=userLabelIdSlice,proto3" json:"user_label_id_slice,omitempty"`
	ServiceName      string   `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *GetNewSupportGamePara) Reset() {
	*x = GetNewSupportGamePara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewSupportGamePara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewSupportGamePara) ProtoMessage() {}

func (x *GetNewSupportGamePara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewSupportGamePara.ProtoReflect.Descriptor instead.
func (*GetNewSupportGamePara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{20}
}

func (x *GetNewSupportGamePara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNewSupportGamePara) GetSupportGame() []string {
	if x != nil {
		return x.SupportGame
	}
	return nil
}

func (x *GetNewSupportGamePara) GetUserLabelIdSlice() []int64 {
	if x != nil {
		return x.UserLabelIdSlice
	}
	return nil
}

func (x *GetNewSupportGamePara) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type GetNewSupportGameRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SupportGame []string `protobuf:"bytes,2,rep,name=support_game,json=supportGame,proto3" json:"support_game,omitempty"`
}

func (x *GetNewSupportGameRes) Reset() {
	*x = GetNewSupportGameRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewSupportGameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewSupportGameRes) ProtoMessage() {}

func (x *GetNewSupportGameRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewSupportGameRes.ProtoReflect.Descriptor instead.
func (*GetNewSupportGameRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{21}
}

func (x *GetNewSupportGameRes) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNewSupportGameRes) GetSupportGame() []string {
	if x != nil {
		return x.SupportGame
	}
	return nil
}

//取得異動紀錄參數
type GetUpdateRecordPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            //使用者id
	SearchPara string `protobuf:"bytes,2,opt,name=search_para,json=searchPara,proto3" json:"search_para,omitempty"` //搜尋特定關鍵字
}

func (x *GetUpdateRecordPara) Reset() {
	*x = GetUpdateRecordPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateRecordPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateRecordPara) ProtoMessage() {}

func (x *GetUpdateRecordPara) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateRecordPara.ProtoReflect.Descriptor instead.
func (*GetUpdateRecordPara) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{22}
}

func (x *GetUpdateRecordPara) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUpdateRecordPara) GetSearchPara() string {
	if x != nil {
		return x.SearchPara
	}
	return ""
}

//取得異動紀錄回應
type GetUpdateRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateRecord []*UpdateRecord `protobuf:"bytes,1,rep,name=update_record,json=updateRecord,proto3" json:"update_record,omitempty"`
}

func (x *GetUpdateRecordRes) Reset() {
	*x = GetUpdateRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateRecordRes) ProtoMessage() {}

func (x *GetUpdateRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateRecordRes.ProtoReflect.Descriptor instead.
func (*GetUpdateRecordRes) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{23}
}

func (x *GetUpdateRecordRes) GetUpdateRecord() []*UpdateRecord {
	if x != nil {
		return x.UpdateRecord
	}
	return nil
}

type UpdateRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UpdatedData []string `protobuf:"bytes,3,rep,name=updated_data,json=updatedData,proto3" json:"updated_data,omitempty"`
	Event       string   `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	UpdatedTime int64    `protobuf:"varint,5,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	CreatedTime int64    `protobuf:"varint,6,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *UpdateRecord) Reset() {
	*x = UpdateRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metatron_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecord) ProtoMessage() {}

func (x *UpdateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_metatron_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecord.ProtoReflect.Descriptor instead.
func (*UpdateRecord) Descriptor() ([]byte, []int) {
	return file_metatron_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateRecord) GetUpdatedData() []string {
	if x != nil {
		return x.UpdatedData
	}
	return nil
}

func (x *UpdateRecord) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *UpdateRecord) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *UpdateRecord) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

var File_metatron_proto protoreflect.FileDescriptor

var file_metatron_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x22, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x22, 0x76, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x2b, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x7d,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x74, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x74, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x74, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x74, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x22, 0x51, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0xa5, 0x07, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x18, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x1a,
	0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x1a,
	0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26,
	0x70, 0x69, 0x6b, 0x61, 0x2e, 0x72, 0x64, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x69, 0x70, 0x2f,
	0x65, 0x64, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x3b, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metatron_proto_rawDescOnce sync.Once
	file_metatron_proto_rawDescData = file_metatron_proto_rawDesc
)

func file_metatron_proto_rawDescGZIP() []byte {
	file_metatron_proto_rawDescOnce.Do(func() {
		file_metatron_proto_rawDescData = protoimpl.X.CompressGZIP(file_metatron_proto_rawDescData)
	})
	return file_metatron_proto_rawDescData
}

var file_metatron_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_metatron_proto_goTypes = []interface{}{
	(*UpdateBigQueryUserDataPara)(nil),  // 0: metatron.UpdateBigQueryUserDataPara
	(*UpdateBigQueryUserDataRes)(nil),   // 1: metatron.UpdateBigQueryUserDataRes
	(*AddUserLabelToUserPara)(nil),      // 2: metatron.AddUserLabelToUserPara
	(*AddUserLabelToUserRes)(nil),       // 3: metatron.AddUserLabelToUserRes
	(*DelUserLabelToUserPara)(nil),      // 4: metatron.DelUserLabelToUserPara
	(*DelUserLabelToUserRes)(nil),       // 5: metatron.DelUserLabelToUserRes
	(*PingRequest)(nil),                 // 6: metatron.PingRequest
	(*Pong)(nil),                        // 7: metatron.Pong
	(*GetUserDataPara)(nil),             // 8: metatron.GetUserDataPara
	(*GetUserDataRes)(nil),              // 9: metatron.GetUserDataRes
	(*UserData)(nil),                    // 10: metatron.UserData
	(*UpdateUserDataPara)(nil),          // 11: metatron.UpdateUserDataPara
	(*UpdateUserDataRes)(nil),           // 12: metatron.UpdateUserDataRes
	(*GetAllUserLabelPara)(nil),         // 13: metatron.GetAllUserLabelPara
	(*GetAllUserLabelRes)(nil),          // 14: metatron.GetAllUserLabelRes
	(*UserLabel)(nil),                   // 15: metatron.UserLabel
	(*AddNewUserLabelPara)(nil),         // 16: metatron.AddNewUserLabelPara
	(*AddNewUserLabelRes)(nil),          // 17: metatron.AddNewUserLabelRes
	(*AddNewUserLabelSettingsPara)(nil), // 18: metatron.AddNewUserLabelSettingsPara
	(*AddNewUserLabelSettingsRes)(nil),  // 19: metatron.AddNewUserLabelSettingsRes
	(*GetNewSupportGamePara)(nil),       // 20: metatron.GetNewSupportGamePara
	(*GetNewSupportGameRes)(nil),        // 21: metatron.GetNewSupportGameRes
	(*GetUpdateRecordPara)(nil),         // 22: metatron.GetUpdateRecordPara
	(*GetUpdateRecordRes)(nil),          // 23: metatron.GetUpdateRecordRes
	(*UpdateRecord)(nil),                // 24: metatron.UpdateRecord
	nil,                                 // 25: metatron.AddNewUserLabelSettingsPara.SupportRtpEntry
}
var file_metatron_proto_depIdxs = []int32{
	10, // 0: metatron.GetUserDataRes.user_data_slice:type_name -> metatron.UserData
	15, // 1: metatron.UserData.user_labels:type_name -> metatron.UserLabel
	15, // 2: metatron.UpdateUserDataPara.user_labels:type_name -> metatron.UserLabel
	15, // 3: metatron.GetAllUserLabelRes.user_labels:type_name -> metatron.UserLabel
	25, // 4: metatron.AddNewUserLabelSettingsPara.support_rtp:type_name -> metatron.AddNewUserLabelSettingsPara.SupportRtpEntry
	24, // 5: metatron.GetUpdateRecordRes.update_record:type_name -> metatron.UpdateRecord
	6,  // 6: metatron.Metatron.Ping:input_type -> metatron.PingRequest
	8,  // 7: metatron.Metatron.GetUserData:input_type -> metatron.GetUserDataPara
	11, // 8: metatron.Metatron.UpdateUserData:input_type -> metatron.UpdateUserDataPara
	2,  // 9: metatron.Metatron.AddUserLabelToUser:input_type -> metatron.AddUserLabelToUserPara
	4,  // 10: metatron.Metatron.DelUserLabelToUser:input_type -> metatron.DelUserLabelToUserPara
	13, // 11: metatron.Metatron.GetAllUserLabel:input_type -> metatron.GetAllUserLabelPara
	16, // 12: metatron.Metatron.AddNewUserLabel:input_type -> metatron.AddNewUserLabelPara
	18, // 13: metatron.Metatron.AddNewUserLabelSettings:input_type -> metatron.AddNewUserLabelSettingsPara
	20, // 14: metatron.Metatron.GetNewSupportGame:input_type -> metatron.GetNewSupportGamePara
	22, // 15: metatron.Metatron.GetUpdateRecord:input_type -> metatron.GetUpdateRecordPara
	0,  // 16: metatron.Metatron.UpdateBigQueryUserData:input_type -> metatron.UpdateBigQueryUserDataPara
	7,  // 17: metatron.Metatron.Ping:output_type -> metatron.Pong
	9,  // 18: metatron.Metatron.GetUserData:output_type -> metatron.GetUserDataRes
	12, // 19: metatron.Metatron.UpdateUserData:output_type -> metatron.UpdateUserDataRes
	3,  // 20: metatron.Metatron.AddUserLabelToUser:output_type -> metatron.AddUserLabelToUserRes
	5,  // 21: metatron.Metatron.DelUserLabelToUser:output_type -> metatron.DelUserLabelToUserRes
	14, // 22: metatron.Metatron.GetAllUserLabel:output_type -> metatron.GetAllUserLabelRes
	17, // 23: metatron.Metatron.AddNewUserLabel:output_type -> metatron.AddNewUserLabelRes
	19, // 24: metatron.Metatron.AddNewUserLabelSettings:output_type -> metatron.AddNewUserLabelSettingsRes
	21, // 25: metatron.Metatron.GetNewSupportGame:output_type -> metatron.GetNewSupportGameRes
	23, // 26: metatron.Metatron.GetUpdateRecord:output_type -> metatron.GetUpdateRecordRes
	1,  // 27: metatron.Metatron.UpdateBigQueryUserData:output_type -> metatron.UpdateBigQueryUserDataRes
	17, // [17:28] is the sub-list for method output_type
	6,  // [6:17] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_metatron_proto_init() }
func file_metatron_proto_init() {
	if File_metatron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metatron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBigQueryUserDataPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBigQueryUserDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLabelToUserPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLabelToUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserLabelToUserPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserLabelToUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDataPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserLabelPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserLabelRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserLabelPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserLabelRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserLabelSettingsPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewUserLabelSettingsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewSupportGamePara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewSupportGameRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateRecordPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metatron_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metatron_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metatron_proto_goTypes,
		DependencyIndexes: file_metatron_proto_depIdxs,
		MessageInfos:      file_metatron_proto_msgTypes,
	}.Build()
	File_metatron_proto = out.File
	file_metatron_proto_rawDesc = nil
	file_metatron_proto_goTypes = nil
	file_metatron_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetatronClient is the client API for Metatron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetatronClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error)
	//取得使用者資料(擁有的玩家標籤)
	GetUserData(ctx context.Context, in *GetUserDataPara, opts ...grpc.CallOption) (*GetUserDataRes, error)
	//更新使用者資料(擁有的玩家標籤)
	UpdateUserData(ctx context.Context, in *UpdateUserDataPara, opts ...grpc.CallOption) (*UpdateUserDataRes, error)
	//新增標籤給使用者
	AddUserLabelToUser(ctx context.Context, in *AddUserLabelToUserPara, opts ...grpc.CallOption) (*AddUserLabelToUserRes, error)
	//移除標籤給使用者
	DelUserLabelToUser(ctx context.Context, in *DelUserLabelToUserPara, opts ...grpc.CallOption) (*DelUserLabelToUserRes, error)
	//取得所有玩家標籤
	GetAllUserLabel(ctx context.Context, in *GetAllUserLabelPara, opts ...grpc.CallOption) (*GetAllUserLabelRes, error)
	//新增玩家標籤
	AddNewUserLabel(ctx context.Context, in *AddNewUserLabelPara, opts ...grpc.CallOption) (*AddNewUserLabelRes, error)
	//新增玩家標籤設定
	AddNewUserLabelSettings(ctx context.Context, in *AddNewUserLabelSettingsPara, opts ...grpc.CallOption) (*AddNewUserLabelSettingsRes, error)
	//給加百列打
	GetNewSupportGame(ctx context.Context, in *GetNewSupportGamePara, opts ...grpc.CallOption) (*GetNewSupportGameRes, error)
	//取得更新紀錄
	GetUpdateRecord(ctx context.Context, in *GetUpdateRecordPara, opts ...grpc.CallOption) (*GetUpdateRecordRes, error)
	//測試bigquery
	UpdateBigQueryUserData(ctx context.Context, in *UpdateBigQueryUserDataPara, opts ...grpc.CallOption) (*UpdateBigQueryUserDataRes, error)
}

type metatronClient struct {
	cc grpc.ClientConnInterface
}

func NewMetatronClient(cc grpc.ClientConnInterface) MetatronClient {
	return &metatronClient{cc}
}

func (c *metatronClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) GetUserData(ctx context.Context, in *GetUserDataPara, opts ...grpc.CallOption) (*GetUserDataRes, error) {
	out := new(GetUserDataRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) UpdateUserData(ctx context.Context, in *UpdateUserDataPara, opts ...grpc.CallOption) (*UpdateUserDataRes, error) {
	out := new(UpdateUserDataRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/UpdateUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) AddUserLabelToUser(ctx context.Context, in *AddUserLabelToUserPara, opts ...grpc.CallOption) (*AddUserLabelToUserRes, error) {
	out := new(AddUserLabelToUserRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/AddUserLabelToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) DelUserLabelToUser(ctx context.Context, in *DelUserLabelToUserPara, opts ...grpc.CallOption) (*DelUserLabelToUserRes, error) {
	out := new(DelUserLabelToUserRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/DelUserLabelToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) GetAllUserLabel(ctx context.Context, in *GetAllUserLabelPara, opts ...grpc.CallOption) (*GetAllUserLabelRes, error) {
	out := new(GetAllUserLabelRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/GetAllUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) AddNewUserLabel(ctx context.Context, in *AddNewUserLabelPara, opts ...grpc.CallOption) (*AddNewUserLabelRes, error) {
	out := new(AddNewUserLabelRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/AddNewUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) AddNewUserLabelSettings(ctx context.Context, in *AddNewUserLabelSettingsPara, opts ...grpc.CallOption) (*AddNewUserLabelSettingsRes, error) {
	out := new(AddNewUserLabelSettingsRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/AddNewUserLabelSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) GetNewSupportGame(ctx context.Context, in *GetNewSupportGamePara, opts ...grpc.CallOption) (*GetNewSupportGameRes, error) {
	out := new(GetNewSupportGameRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/GetNewSupportGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) GetUpdateRecord(ctx context.Context, in *GetUpdateRecordPara, opts ...grpc.CallOption) (*GetUpdateRecordRes, error) {
	out := new(GetUpdateRecordRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/GetUpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metatronClient) UpdateBigQueryUserData(ctx context.Context, in *UpdateBigQueryUserDataPara, opts ...grpc.CallOption) (*UpdateBigQueryUserDataRes, error) {
	out := new(UpdateBigQueryUserDataRes)
	err := c.cc.Invoke(ctx, "/metatron.Metatron/UpdateBigQueryUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetatronServer is the server API for Metatron service.
type MetatronServer interface {
	Ping(context.Context, *PingRequest) (*Pong, error)
	//取得使用者資料(擁有的玩家標籤)
	GetUserData(context.Context, *GetUserDataPara) (*GetUserDataRes, error)
	//更新使用者資料(擁有的玩家標籤)
	UpdateUserData(context.Context, *UpdateUserDataPara) (*UpdateUserDataRes, error)
	//新增標籤給使用者
	AddUserLabelToUser(context.Context, *AddUserLabelToUserPara) (*AddUserLabelToUserRes, error)
	//移除標籤給使用者
	DelUserLabelToUser(context.Context, *DelUserLabelToUserPara) (*DelUserLabelToUserRes, error)
	//取得所有玩家標籤
	GetAllUserLabel(context.Context, *GetAllUserLabelPara) (*GetAllUserLabelRes, error)
	//新增玩家標籤
	AddNewUserLabel(context.Context, *AddNewUserLabelPara) (*AddNewUserLabelRes, error)
	//新增玩家標籤設定
	AddNewUserLabelSettings(context.Context, *AddNewUserLabelSettingsPara) (*AddNewUserLabelSettingsRes, error)
	//給加百列打
	GetNewSupportGame(context.Context, *GetNewSupportGamePara) (*GetNewSupportGameRes, error)
	//取得更新紀錄
	GetUpdateRecord(context.Context, *GetUpdateRecordPara) (*GetUpdateRecordRes, error)
	//測試bigquery
	UpdateBigQueryUserData(context.Context, *UpdateBigQueryUserDataPara) (*UpdateBigQueryUserDataRes, error)
}

// UnimplementedMetatronServer can be embedded to have forward compatible implementations.
type UnimplementedMetatronServer struct {
}

func (*UnimplementedMetatronServer) Ping(context.Context, *PingRequest) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMetatronServer) GetUserData(context.Context, *GetUserDataPara) (*GetUserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (*UnimplementedMetatronServer) UpdateUserData(context.Context, *UpdateUserDataPara) (*UpdateUserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserData not implemented")
}
func (*UnimplementedMetatronServer) AddUserLabelToUser(context.Context, *AddUserLabelToUserPara) (*AddUserLabelToUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLabelToUser not implemented")
}
func (*UnimplementedMetatronServer) DelUserLabelToUser(context.Context, *DelUserLabelToUserPara) (*DelUserLabelToUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserLabelToUser not implemented")
}
func (*UnimplementedMetatronServer) GetAllUserLabel(context.Context, *GetAllUserLabelPara) (*GetAllUserLabelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserLabel not implemented")
}
func (*UnimplementedMetatronServer) AddNewUserLabel(context.Context, *AddNewUserLabelPara) (*AddNewUserLabelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUserLabel not implemented")
}
func (*UnimplementedMetatronServer) AddNewUserLabelSettings(context.Context, *AddNewUserLabelSettingsPara) (*AddNewUserLabelSettingsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUserLabelSettings not implemented")
}
func (*UnimplementedMetatronServer) GetNewSupportGame(context.Context, *GetNewSupportGamePara) (*GetNewSupportGameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewSupportGame not implemented")
}
func (*UnimplementedMetatronServer) GetUpdateRecord(context.Context, *GetUpdateRecordPara) (*GetUpdateRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateRecord not implemented")
}
func (*UnimplementedMetatronServer) UpdateBigQueryUserData(context.Context, *UpdateBigQueryUserDataPara) (*UpdateBigQueryUserDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBigQueryUserData not implemented")
}

func RegisterMetatronServer(s *grpc.Server, srv MetatronServer) {
	s.RegisterService(&_Metatron_serviceDesc, srv)
}

func _Metatron_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).GetUserData(ctx, req.(*GetUserDataPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_UpdateUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDataPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).UpdateUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/UpdateUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).UpdateUserData(ctx, req.(*UpdateUserDataPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_AddUserLabelToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserLabelToUserPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).AddUserLabelToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/AddUserLabelToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).AddUserLabelToUser(ctx, req.(*AddUserLabelToUserPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_DelUserLabelToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserLabelToUserPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).DelUserLabelToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/DelUserLabelToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).DelUserLabelToUser(ctx, req.(*DelUserLabelToUserPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_GetAllUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserLabelPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).GetAllUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/GetAllUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).GetAllUserLabel(ctx, req.(*GetAllUserLabelPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_AddNewUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewUserLabelPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).AddNewUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/AddNewUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).AddNewUserLabel(ctx, req.(*AddNewUserLabelPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_AddNewUserLabelSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewUserLabelSettingsPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).AddNewUserLabelSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/AddNewUserLabelSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).AddNewUserLabelSettings(ctx, req.(*AddNewUserLabelSettingsPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_GetNewSupportGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewSupportGamePara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).GetNewSupportGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/GetNewSupportGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).GetNewSupportGame(ctx, req.(*GetNewSupportGamePara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_GetUpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateRecordPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).GetUpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/GetUpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).GetUpdateRecord(ctx, req.(*GetUpdateRecordPara))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metatron_UpdateBigQueryUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBigQueryUserDataPara)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatronServer).UpdateBigQueryUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metatron.Metatron/UpdateBigQueryUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatronServer).UpdateBigQueryUserData(ctx, req.(*UpdateBigQueryUserDataPara))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metatron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metatron.Metatron",
	HandlerType: (*MetatronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Metatron_Ping_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _Metatron_GetUserData_Handler,
		},
		{
			MethodName: "UpdateUserData",
			Handler:    _Metatron_UpdateUserData_Handler,
		},
		{
			MethodName: "AddUserLabelToUser",
			Handler:    _Metatron_AddUserLabelToUser_Handler,
		},
		{
			MethodName: "DelUserLabelToUser",
			Handler:    _Metatron_DelUserLabelToUser_Handler,
		},
		{
			MethodName: "GetAllUserLabel",
			Handler:    _Metatron_GetAllUserLabel_Handler,
		},
		{
			MethodName: "AddNewUserLabel",
			Handler:    _Metatron_AddNewUserLabel_Handler,
		},
		{
			MethodName: "AddNewUserLabelSettings",
			Handler:    _Metatron_AddNewUserLabelSettings_Handler,
		},
		{
			MethodName: "GetNewSupportGame",
			Handler:    _Metatron_GetNewSupportGame_Handler,
		},
		{
			MethodName: "GetUpdateRecord",
			Handler:    _Metatron_GetUpdateRecord_Handler,
		},
		{
			MethodName: "UpdateBigQueryUserData",
			Handler:    _Metatron_UpdateBigQueryUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metatron.proto",
}
